{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAIjD,MAAM,QAAQ,GAAG,cAAc,CAAiB,UAAU,EAAE;IAC1D,GAAG,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;CAC5D,CAAC,CAAC;AAEH,SAAS,WAAW,CAAC,QAA6C;;IAChE,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;QACnC,MAAA,QAAQ;aACL,aAAa,CAAc,OAAO,CAAC,0CAClC,KAAK,CAAC,WAAW,CAAC,qBAAqB,QAAQ,EAAE,EAAE,2BAA2B,QAAQ,SAAS,EAAE;KACtG;AACH,CAAC;AAED;;;;;;;;;GASG;AACH,SAAS,UAAU;IACjB,WAAW,CAAC,KAAK,CAAC,CAAC;IACnB,WAAW,CAAC,MAAM,CAAC,CAAC;IACpB,WAAW,CAAC,QAAQ,CAAC,CAAC;IACtB,WAAW,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC;AAED,UAAU,EAAE,CAAC;AAEb,cAAc,eAAe,CAAC;AAC9B,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type { SafeAreaPlugin } from './definitions';\n\nconst SafeArea = registerPlugin<SafeAreaPlugin>('SafeArea', {\n  web: () => import('./web').then((m) => new m.SafeAreaWeb()),\n});\n\nfunction setProperty(position: 'top' | 'left' | 'bottom' | 'right') {\n  if (typeof document !== 'undefined') {\n    document\n      .querySelector<HTMLElement>(':root')\n      ?.style.setProperty(`--safe-area-inset-${position}`, `max(env(safe-area-inset-${position}), 0px)`);\n  }\n}\n\n/**\n * Set initial safe area values.\n * This makes sure `var(--safe-area-inset-*)` values can be used immediately and everywhere.\n * This method will be automatically called.\n *\n * Note for developers using SSR:\n * Only in an SSR environment this method will not necessarily be executed.\n * So if you're using this plugin in an SSR environment,\n * you should call this method as soon as `window.document` becomes available.\n */\nfunction initialize(): void {\n  setProperty('top');\n  setProperty('left');\n  setProperty('bottom');\n  setProperty('right');\n}\n\ninitialize();\n\nexport * from './definitions';\nexport { SafeArea, initialize };\n"]}